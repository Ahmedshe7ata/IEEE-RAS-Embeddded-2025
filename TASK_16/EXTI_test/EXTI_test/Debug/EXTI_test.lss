
EXTI_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000516  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000516  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006a  0080006a  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e93  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000901  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008be  00000000  00000000  00002ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_1>
   8:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  8a:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:


                    /* PIN APIS */
void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
    switch(PortId)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	01 f1       	breq	.+64     	; 0xd6 <DIO_setPinDirection+0x44>
  96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_setPinDirection+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b1 f1       	breq	.+108    	; 0x108 <DIO_setPinDirection+0x76>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_setPinDirection+0x10>
  a0:	4c c0       	rjmp	.+152    	; 0x13a <DIO_setPinDirection+0xa8>
  a2:	08 95       	ret
    {
		case DIO_PORTA:
		if(DIO_PIN_OUTPUT == PinDirection)
  a4:	41 30       	cpi	r20, 0x01	; 1
  a6:	59 f4       	brne	.+22     	; 0xbe <DIO_setPinDirection+0x2c>
        {
            SET_BIT(DDRA,PinId);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_setPinDirection+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_setPinDirection+0x1e>
  b8:	82 2b       	or	r24, r18
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRA,PinId);
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_setPinDirection+0x38>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_setPinDirection+0x34>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
        }
		break;

		case DIO_PORTB:
		if(DIO_PIN_OUTPUT == PinDirection)
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	59 f4       	brne	.+22     	; 0xf0 <DIO_setPinDirection+0x5e>
        {
            SET_BIT(DDRB,PinId);
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_setPinDirection+0x54>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_setPinDirection+0x50>
  ea:	82 2b       	or	r24, r18
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRB,PinId);
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_setPinDirection+0x6a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_setPinDirection+0x66>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
        }
		break;

		case DIO_PORTC:
		if(DIO_PIN_OUTPUT == PinDirection)
 108:	41 30       	cpi	r20, 0x01	; 1
 10a:	59 f4       	brne	.+22     	; 0x122 <DIO_setPinDirection+0x90>
        {
            SET_BIT(DDRC,PinId);
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_setPinDirection+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_setPinDirection+0x82>
 11c:	82 2b       	or	r24, r18
 11e:	84 bb       	out	0x14, r24	; 20
 120:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRC,PinId);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_setPinDirection+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_setPinDirection+0x98>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
        }
		break;

		case DIO_PORTD:
		if(DIO_PIN_OUTPUT == PinDirection)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_setPinDirection+0xc2>
        {
            SET_BIT(DDRD,PinId);
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_setPinDirection+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_setPinDirection+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRD,PinId);
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_setPinDirection+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_setPinDirection+0xca>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	switch(PortId)
 16c:	81 11       	cpse	r24, r1
 16e:	1a c0       	rjmp	.+52     	; 0x1a4 <DIO_setPinValue+0x38>
	{
		case DIO_PORTA:
		if(DIO_PIN_HIGH==PinValue)
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	61 f4       	brne	.+24     	; 0x18c <DIO_setPinValue+0x20>
        {
			SET_BIT(PORTA, PinId);
 174:	9b b3       	in	r25, 0x1b	; 27
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	06 2e       	mov	r0, r22
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_setPinValue+0x16>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_setPinValue+0x12>
 186:	29 2b       	or	r18, r25
 188:	2b bb       	out	0x1b, r18	; 27
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <DIO_setPinValue+0x38>
		}
		else
		{
			CLR_BIT(PORTA, PinId);
 18c:	9b b3       	in	r25, 0x1b	; 27
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	06 2e       	mov	r0, r22
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinValue+0x2e>
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinValue+0x2a>
 19e:	20 95       	com	r18
 1a0:	29 23       	and	r18, r25
 1a2:	2b bb       	out	0x1b, r18	; 27
		}
		break;
	}

    switch(PortId)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	d1 f4       	brne	.+52     	; 0x1dc <DIO_setPinValue+0x70>
	{
		case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	61 f4       	brne	.+24     	; 0x1c4 <DIO_setPinValue+0x58>
        {
			SET_BIT(PORTB, PinId);
 1ac:	98 b3       	in	r25, 0x18	; 24
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	06 2e       	mov	r0, r22
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setPinValue+0x4e>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setPinValue+0x4a>
 1be:	29 2b       	or	r18, r25
 1c0:	28 bb       	out	0x18, r18	; 24
 1c2:	0c c0       	rjmp	.+24     	; 0x1dc <DIO_setPinValue+0x70>
		}
		else
		{
			CLR_BIT(PORTB, PinId);
 1c4:	98 b3       	in	r25, 0x18	; 24
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	06 2e       	mov	r0, r22
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_setPinValue+0x66>
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_setPinValue+0x62>
 1d6:	20 95       	com	r18
 1d8:	29 23       	and	r18, r25
 1da:	28 bb       	out	0x18, r18	; 24
		}
		break;
	}

    switch(PortId)
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d1 f4       	brne	.+52     	; 0x214 <DIO_setPinValue+0xa8>
	{
		case DIO_PORTC:
		if(DIO_PIN_HIGH==PinValue)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	61 f4       	brne	.+24     	; 0x1fc <DIO_setPinValue+0x90>
        {
			SET_BIT(PORTC, PinId);
 1e4:	95 b3       	in	r25, 0x15	; 21
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	06 2e       	mov	r0, r22
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_setPinValue+0x86>
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_setPinValue+0x82>
 1f6:	29 2b       	or	r18, r25
 1f8:	25 bb       	out	0x15, r18	; 21
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <DIO_setPinValue+0xa8>
		}
		else
		{
			CLR_BIT(PORTC, PinId);
 1fc:	95 b3       	in	r25, 0x15	; 21
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	06 2e       	mov	r0, r22
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_setPinValue+0x9e>
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_setPinValue+0x9a>
 20e:	20 95       	com	r18
 210:	29 23       	and	r18, r25
 212:	25 bb       	out	0x15, r18	; 21
		}
		break;
	}

    switch(PortId)
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	c1 f4       	brne	.+48     	; 0x248 <DIO_setPinValue+0xdc>
	{
		case DIO_PORTD:
		if(DIO_PIN_HIGH==PinValue)
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	59 f4       	brne	.+22     	; 0x232 <DIO_setPinValue+0xc6>
        {
			SET_BIT(PORTD, PinId);
 21c:	22 b3       	in	r18, 0x12	; 18
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_setPinValue+0xbc>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_setPinValue+0xb8>
 22c:	82 2b       	or	r24, r18
 22e:	82 bb       	out	0x12, r24	; 18
 230:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD, PinId);
 232:	22 b3       	in	r18, 0x12	; 18
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_setPinValue+0xd2>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_setPinValue+0xce>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	82 bb       	out	0x12, r24	; 18
 248:	08 95       	ret

0000024a <EXTI_enable>:
		case EXTI_INT1:
		CLR_BIT(GICR, 7);    //disable EXTI1
		break;
		
		case EXTI_INT2:
		CLR_BIT(GICR, 5);   //disable EXTI2
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	61 f1       	breq	.+88     	; 0x2a6 <EXTI_enable+0x5c>
 24e:	20 f0       	brcs	.+8      	; 0x258 <EXTI_enable+0xe>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	09 f4       	brne	.+2      	; 0x256 <EXTI_enable+0xc>
 254:	4f c0       	rjmp	.+158    	; 0x2f4 <EXTI_enable+0xaa>
 256:	08 95       	ret
 258:	61 11       	cpse	r22, r1
 25a:	07 c0       	rjmp	.+14     	; 0x26a <EXTI_enable+0x20>
 25c:	85 b7       	in	r24, 0x35	; 53
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	85 bf       	out	0x35, r24	; 53
 262:	85 b7       	in	r24, 0x35	; 53
 264:	82 60       	ori	r24, 0x02	; 2
 266:	85 bf       	out	0x35, r24	; 53
 268:	1a c0       	rjmp	.+52     	; 0x29e <EXTI_enable+0x54>
 26a:	61 30       	cpi	r22, 0x01	; 1
 26c:	39 f4       	brne	.+14     	; 0x27c <EXTI_enable+0x32>
 26e:	85 b7       	in	r24, 0x35	; 53
 270:	8e 7f       	andi	r24, 0xFE	; 254
 272:	85 bf       	out	0x35, r24	; 53
 274:	85 b7       	in	r24, 0x35	; 53
 276:	82 60       	ori	r24, 0x02	; 2
 278:	85 bf       	out	0x35, r24	; 53
 27a:	11 c0       	rjmp	.+34     	; 0x29e <EXTI_enable+0x54>
 27c:	62 30       	cpi	r22, 0x02	; 2
 27e:	39 f4       	brne	.+14     	; 0x28e <EXTI_enable+0x44>
 280:	85 b7       	in	r24, 0x35	; 53
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	85 bf       	out	0x35, r24	; 53
 286:	85 b7       	in	r24, 0x35	; 53
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	85 bf       	out	0x35, r24	; 53
 28c:	08 c0       	rjmp	.+16     	; 0x29e <EXTI_enable+0x54>
 28e:	63 30       	cpi	r22, 0x03	; 3
 290:	31 f4       	brne	.+12     	; 0x29e <EXTI_enable+0x54>
 292:	85 b7       	in	r24, 0x35	; 53
 294:	81 60       	ori	r24, 0x01	; 1
 296:	85 bf       	out	0x35, r24	; 53
 298:	85 b7       	in	r24, 0x35	; 53
 29a:	8d 7f       	andi	r24, 0xFD	; 253
 29c:	85 bf       	out	0x35, r24	; 53
 29e:	8b b7       	in	r24, 0x3b	; 59
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	8b bf       	out	0x3b, r24	; 59
 2a4:	08 95       	ret
 2a6:	61 11       	cpse	r22, r1
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <EXTI_enable+0x6e>
 2aa:	85 b7       	in	r24, 0x35	; 53
 2ac:	84 60       	ori	r24, 0x04	; 4
 2ae:	85 bf       	out	0x35, r24	; 53
 2b0:	85 b7       	in	r24, 0x35	; 53
 2b2:	88 60       	ori	r24, 0x08	; 8
 2b4:	85 bf       	out	0x35, r24	; 53
 2b6:	1a c0       	rjmp	.+52     	; 0x2ec <EXTI_enable+0xa2>
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	39 f4       	brne	.+14     	; 0x2ca <EXTI_enable+0x80>
 2bc:	85 b7       	in	r24, 0x35	; 53
 2be:	8b 7f       	andi	r24, 0xFB	; 251
 2c0:	85 bf       	out	0x35, r24	; 53
 2c2:	85 b7       	in	r24, 0x35	; 53
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	85 bf       	out	0x35, r24	; 53
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <EXTI_enable+0xa2>
 2ca:	62 30       	cpi	r22, 0x02	; 2
 2cc:	39 f4       	brne	.+14     	; 0x2dc <EXTI_enable+0x92>
 2ce:	85 b7       	in	r24, 0x35	; 53
 2d0:	8b 7f       	andi	r24, 0xFB	; 251
 2d2:	85 bf       	out	0x35, r24	; 53
 2d4:	85 b7       	in	r24, 0x35	; 53
 2d6:	87 7f       	andi	r24, 0xF7	; 247
 2d8:	85 bf       	out	0x35, r24	; 53
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <EXTI_enable+0xa2>
 2dc:	63 30       	cpi	r22, 0x03	; 3
 2de:	31 f4       	brne	.+12     	; 0x2ec <EXTI_enable+0xa2>
 2e0:	85 b7       	in	r24, 0x35	; 53
 2e2:	84 60       	ori	r24, 0x04	; 4
 2e4:	85 bf       	out	0x35, r24	; 53
 2e6:	85 b7       	in	r24, 0x35	; 53
 2e8:	87 7f       	andi	r24, 0xF7	; 247
 2ea:	85 bf       	out	0x35, r24	; 53
 2ec:	8b b7       	in	r24, 0x3b	; 59
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	8b bf       	out	0x3b, r24	; 59
 2f2:	08 95       	ret
 2f4:	61 11       	cpse	r22, r1
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <EXTI_enable+0xb6>
 2f8:	84 b7       	in	r24, 0x34	; 52
 2fa:	80 64       	ori	r24, 0x40	; 64
 2fc:	84 bf       	out	0x34, r24	; 52
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <EXTI_enable+0xc0>
 300:	61 30       	cpi	r22, 0x01	; 1
 302:	19 f4       	brne	.+6      	; 0x30a <EXTI_enable+0xc0>
 304:	84 b7       	in	r24, 0x34	; 52
 306:	8f 7b       	andi	r24, 0xBF	; 191
 308:	84 bf       	out	0x34, r24	; 52
 30a:	8b b7       	in	r24, 0x3b	; 59
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	8b bf       	out	0x3b, r24	; 59
 310:	08 95       	ret

00000312 <EXTI_INT0SetCallBack>:
	}
}

void EXTI_INT0SetCallBack(void(*ptr)(void))
{ 	
	pCallBack = ptr;
 312:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCallBack+0x1>
 316:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCallBack>
 31a:	08 95       	ret

0000031c <__vector_1>:
}

void __vector_1(void) __attribute__ ((signal));
void __vector_1(void)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	pCallBack();
 33e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCallBack>
 342:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCallBack+0x1>
 346:	09 95       	icall
}
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <EXTI_INT1SetCallBack>:

void EXTI_INT1SetCallBack(void(*ptr1)(void))
{
	p1CallBack = ptr1;
 36a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 36e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 372:	08 95       	ret

00000374 <__vector_2>:
}

void __vector_2(void) __attribute__ ((signal));
void __vector_2(void)
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
	p1CallBack();
 396:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 39a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 39e:	09 95       	icall
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <GI_enable>:



void GI_enable(void)
{
	SET_BIT(SREG, 7);
 3c2:	8f b7       	in	r24, 0x3f	; 63
 3c4:	80 68       	ori	r24, 0x80	; 128
 3c6:	8f bf       	out	0x3f, r24	; 63
 3c8:	08 95       	ret

000003ca <func1>:
		 _delay_ms(1000);
     }

     void func1(void)
     {
	     displayFlag = 1;   
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <displayFlag>
 3d0:	08 95       	ret

000003d2 <func>:
     }


     void func(void)
     {
	     DIO_setPinValue(DIO_PORTC,DIO_PIN1, DIO_PIN_LOW);  // Toggle Buzzer
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	2f e3       	ldi	r18, 0x3F	; 63
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	93 e0       	ldi	r25, 0x03	; 3
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <func+0x10>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <func+0x1a>
 3ec:	00 00       	nop
		 _delay_ms(1000);
		 DIO_setPinValue(DIO_PORTC,DIO_PIN1, DIO_PIN_HIGH);
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_setPinValue>
 3f8:	2f e3       	ldi	r18, 0x3F	; 63
 3fa:	8d e0       	ldi	r24, 0x0D	; 13
 3fc:	93 e0       	ldi	r25, 0x03	; 3
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <func+0x2c>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	08 95       	ret

0000040c <main>:
volatile u8 displayFlag = 0;
int main(void)
{
	
	/* Replace with your application code */
	DIO_setPinDirection(DIO_PORTC,DIO_PIN1,DIO_PIN_OUTPUT);// buzzer
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT); // INT0
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_INPUT); // INT1
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	63 e0       	ldi	r22, 0x03	; 3
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTA, DIO_PIN0, DIO_PIN_OUTPUT);
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA, DIO_PIN1, DIO_PIN_OUTPUT);
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT);
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT);
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	63 e0       	ldi	r22, 0x03	; 3
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA, DIO_PIN4, DIO_PIN_OUTPUT);
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	64 e0       	ldi	r22, 0x04	; 4
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA, DIO_PIN5, DIO_PIN_OUTPUT);
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	65 e0       	ldi	r22, 0x05	; 5
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA, DIO_PIN6, DIO_PIN_OUTPUT);
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	66 e0       	ldi	r22, 0x06	; 6
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	GI_enable();
 470:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <GI_enable>
	EXTI_INT0SetCallBack(&func);
 474:	89 ee       	ldi	r24, 0xE9	; 233
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 89 01 	call	0x312	; 0x312 <EXTI_INT0SetCallBack>
	EXTI_enable(EXTI_INT0,EXTI_RISING_EDGE);
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 25 01 	call	0x24a	; 0x24a <EXTI_enable>
	
	EXTI_INT1SetCallBack(&func1);
 484:	85 ee       	ldi	r24, 0xE5	; 229
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 b5 01 	call	0x36a	; 0x36a <EXTI_INT1SetCallBack>
	EXTI_enable(EXTI_INT1,EXTI_RISING_EDGE);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 25 01 	call	0x24a	; 0x24a <EXTI_enable>
     while (1)
     {
	     if(displayFlag == 1)
 494:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <displayFlag>
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	e1 f7       	brne	.-8      	; 0x494 <main+0x88>
 49c:	0e c0       	rjmp	.+28     	; 0x4ba <main+0xae>
	     {
		     for(u8 i=1;i<=9;i++)
		     {
			     SEG7_displaySingleNumber(i);
 49e:	8c 2f       	mov	r24, r28
 4a0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SEG7_displaySingleNumber>
 4a4:	2f e3       	ldi	r18, 0x3F	; 63
 4a6:	8d e0       	ldi	r24, 0x0D	; 13
 4a8:	93 e0       	ldi	r25, 0x03	; 3
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0x9e>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0xa8>
 4b4:	00 00       	nop
	EXTI_enable(EXTI_INT1,EXTI_RISING_EDGE);
     while (1)
     {
	     if(displayFlag == 1)
	     {
		     for(u8 i=1;i<=9;i++)
 4b6:	cf 5f       	subi	r28, 0xFF	; 255
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <main+0xb0>
 4ba:	c1 e0       	ldi	r28, 0x01	; 1
 4bc:	ca 30       	cpi	r28, 0x0A	; 10
 4be:	78 f3       	brcs	.-34     	; 0x49e <main+0x92>
		     {
			     SEG7_displaySingleNumber(i);
			     _delay_ms(1000);
		     }
		     displayFlag = 0;  
 4c0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <displayFlag>
 4c4:	e7 cf       	rjmp	.-50     	; 0x494 <main+0x88>

000004c6 <SEG7_displaySingleNumber>:
#include "SEG7_config.h"



void SEG7_displaySingleNumber(u8 Number)
{
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
 4ce:	2a 97       	sbiw	r28, 0x0a	; 10
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
    u8 SegmentEncoding[10] = {
 4da:	9a e0       	ldi	r25, 0x0A	; 10
 4dc:	e0 e6       	ldi	r30, 0x60	; 96
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	de 01       	movw	r26, r28
 4e2:	11 96       	adiw	r26, 0x01	; 1
 4e4:	01 90       	ld	r0, Z+
 4e6:	0d 92       	st	X+, r0
 4e8:	9a 95       	dec	r25
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <SEG7_displaySingleNumber+0x1e>
        0b00000111, // 7
        0b01111111, // 8
        0b01101111  // 9
    };

    if(Number <= 9)
 4ec:	8a 30       	cpi	r24, 0x0A	; 10
 4ee:	40 f4       	brcc	.+16     	; 0x500 <SEG7_displaySingleNumber+0x3a>
    {
        PORTNUM = SegmentEncoding[Number];
 4f0:	e1 e0       	ldi	r30, 0x01	; 1
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	ec 0f       	add	r30, r28
 4f6:	fd 1f       	adc	r31, r29
 4f8:	e8 0f       	add	r30, r24
 4fa:	f1 1d       	adc	r31, r1
 4fc:	80 81       	ld	r24, Z
 4fe:	8b bb       	out	0x1b, r24	; 27
    }
}
 500:	2a 96       	adiw	r28, 0x0a	; 10
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
