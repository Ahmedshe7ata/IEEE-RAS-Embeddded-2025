
task_12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001266  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d2  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000846  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000516  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008a0  00000000  00000000  000030c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 02 	call	0x482	; 0x482 <main>
  64:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:
		case DIO_PORTC:
		TOG_BIT(PORTC, PortId);
		break;

		case DIO_PORTD:
		TOG_BIT(PORTD, PortId);
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	01 f1       	breq	.+64     	; 0xb0 <DIO_setPinDirection+0x44>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_setPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	b1 f1       	breq	.+108    	; 0xe2 <DIO_setPinDirection+0x76>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_setPinDirection+0x10>
  7a:	4c c0       	rjmp	.+152    	; 0x114 <DIO_setPinDirection+0xa8>
  7c:	08 95       	ret
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <DIO_setPinDirection+0x2c>
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <DIO_setPinDirection+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <DIO_setPinDirection+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_setPinDirection+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_setPinDirection+0x34>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	59 f4       	brne	.+22     	; 0xca <DIO_setPinDirection+0x5e>
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_setPinDirection+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_setPinDirection+0x50>
  c4:	82 2b       	or	r24, r18
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	08 95       	ret
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_setPinDirection+0x6a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_setPinDirection+0x66>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	59 f4       	brne	.+22     	; 0xfc <DIO_setPinDirection+0x90>
  e6:	24 b3       	in	r18, 0x14	; 20
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_setPinDirection+0x86>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_setPinDirection+0x82>
  f6:	82 2b       	or	r24, r18
  f8:	84 bb       	out	0x14, r24	; 20
  fa:	08 95       	ret
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_setPinDirection+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_setPinDirection+0x98>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <DIO_setPinDirection+0xc2>
 118:	21 b3       	in	r18, 0x11	; 17
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_setPinDirection+0xb8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_setPinDirection+0xb4>
 128:	82 2b       	or	r24, r18
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	08 95       	ret
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_setPinDirection+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_setPinDirection+0xca>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret

00000146 <DIO_setPinValue>:
 146:	81 11       	cpse	r24, r1
 148:	1a c0       	rjmp	.+52     	; 0x17e <DIO_setPinValue+0x38>
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	61 f4       	brne	.+24     	; 0x166 <DIO_setPinValue+0x20>
 14e:	9b b3       	in	r25, 0x1b	; 27
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	06 2e       	mov	r0, r22
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinValue+0x16>
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinValue+0x12>
 160:	29 2b       	or	r18, r25
 162:	2b bb       	out	0x1b, r18	; 27
 164:	0c c0       	rjmp	.+24     	; 0x17e <DIO_setPinValue+0x38>
 166:	9b b3       	in	r25, 0x1b	; 27
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	06 2e       	mov	r0, r22
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_setPinValue+0x2e>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_setPinValue+0x2a>
 178:	20 95       	com	r18
 17a:	29 23       	and	r18, r25
 17c:	2b bb       	out	0x1b, r18	; 27
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	d1 f4       	brne	.+52     	; 0x1b6 <DIO_setPinValue+0x70>
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	61 f4       	brne	.+24     	; 0x19e <DIO_setPinValue+0x58>
 186:	98 b3       	in	r25, 0x18	; 24
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	06 2e       	mov	r0, r22
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_setPinValue+0x4e>
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_setPinValue+0x4a>
 198:	29 2b       	or	r18, r25
 19a:	28 bb       	out	0x18, r18	; 24
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <DIO_setPinValue+0x70>
 19e:	98 b3       	in	r25, 0x18	; 24
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	06 2e       	mov	r0, r22
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_setPinValue+0x66>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_setPinValue+0x62>
 1b0:	20 95       	com	r18
 1b2:	29 23       	and	r18, r25
 1b4:	28 bb       	out	0x18, r18	; 24
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	d1 f4       	brne	.+52     	; 0x1ee <DIO_setPinValue+0xa8>
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	61 f4       	brne	.+24     	; 0x1d6 <DIO_setPinValue+0x90>
 1be:	95 b3       	in	r25, 0x15	; 21
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	06 2e       	mov	r0, r22
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_setPinValue+0x86>
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_setPinValue+0x82>
 1d0:	29 2b       	or	r18, r25
 1d2:	25 bb       	out	0x15, r18	; 21
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <DIO_setPinValue+0xa8>
 1d6:	95 b3       	in	r25, 0x15	; 21
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	06 2e       	mov	r0, r22
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinValue+0x9e>
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinValue+0x9a>
 1e8:	20 95       	com	r18
 1ea:	29 23       	and	r18, r25
 1ec:	25 bb       	out	0x15, r18	; 21
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	c1 f4       	brne	.+48     	; 0x222 <DIO_setPinValue+0xdc>
 1f2:	41 30       	cpi	r20, 0x01	; 1
 1f4:	59 f4       	brne	.+22     	; 0x20c <DIO_setPinValue+0xc6>
 1f6:	22 b3       	in	r18, 0x12	; 18
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_setPinValue+0xbc>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_setPinValue+0xb8>
 206:	82 2b       	or	r24, r18
 208:	82 bb       	out	0x12, r24	; 18
 20a:	08 95       	ret
 20c:	22 b3       	in	r18, 0x12	; 18
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setPinValue+0xd2>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setPinValue+0xce>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	82 bb       	out	0x12, r24	; 18
 222:	08 95       	ret

00000224 <DIO_getPinValue>:
	}
}

void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
	switch(PortId)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	b1 f0       	breq	.+44     	; 0x254 <DIO_getPinValue+0x30>
 228:	28 f0       	brcs	.+10     	; 0x234 <DIO_getPinValue+0x10>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	19 f1       	breq	.+70     	; 0x274 <DIO_getPinValue+0x50>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	89 f1       	breq	.+98     	; 0x294 <DIO_getPinValue+0x70>
 232:	08 95       	ret
	{
		case DIO_PORTA:
		if(1 == GET_BIT(PINA, PinId))
 234:	89 b3       	in	r24, 0x19	; 25
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_getPinValue+0x1a>
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_getPinValue+0x16>
 242:	80 ff       	sbrs	r24, 0
 244:	04 c0       	rjmp	.+8      	; 0x24e <DIO_getPinValue+0x2a>
		{
			*PinValue = DIO_PIN_HIGH;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	fa 01       	movw	r30, r20
 24a:	80 83       	st	Z, r24
 24c:	08 95       	ret
        }
        else
        {
			*PinValue = DIO_PIN_LOW;
 24e:	fa 01       	movw	r30, r20
 250:	10 82       	st	Z, r1
 252:	08 95       	ret
        }
		break;

		case DIO_PORTB:
		if(1 == GET_BIT(PINB, PinId))
 254:	86 b3       	in	r24, 0x16	; 22
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_getPinValue+0x3a>
 25a:	95 95       	asr	r25
 25c:	87 95       	ror	r24
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_getPinValue+0x36>
 262:	80 ff       	sbrs	r24, 0
 264:	04 c0       	rjmp	.+8      	; 0x26e <DIO_getPinValue+0x4a>
		{
			*PinValue = DIO_PIN_HIGH;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	fa 01       	movw	r30, r20
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret
        }
        else
        {
			*PinValue = DIO_PIN_LOW;
 26e:	fa 01       	movw	r30, r20
 270:	10 82       	st	Z, r1
 272:	08 95       	ret
        }
		break;

		case DIO_PORTC:
		if(1 == GET_BIT(PINC, PinId))
 274:	83 b3       	in	r24, 0x13	; 19
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_getPinValue+0x5a>
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_getPinValue+0x56>
 282:	80 ff       	sbrs	r24, 0
 284:	04 c0       	rjmp	.+8      	; 0x28e <DIO_getPinValue+0x6a>
		{
			*PinValue = DIO_PIN_HIGH;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	fa 01       	movw	r30, r20
 28a:	80 83       	st	Z, r24
 28c:	08 95       	ret
        }
        else
        {
			*PinValue = DIO_PIN_LOW;
 28e:	fa 01       	movw	r30, r20
 290:	10 82       	st	Z, r1
 292:	08 95       	ret
        }
		break;

		case DIO_PORTD:
		if(1 == GET_BIT(PIND, PinId))
 294:	80 b3       	in	r24, 0x10	; 16
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_getPinValue+0x7a>
 29a:	95 95       	asr	r25
 29c:	87 95       	ror	r24
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_getPinValue+0x76>
 2a2:	80 ff       	sbrs	r24, 0
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <DIO_getPinValue+0x8a>
		{
			*PinValue = DIO_PIN_HIGH;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	fa 01       	movw	r30, r20
 2aa:	80 83       	st	Z, r24
 2ac:	08 95       	ret
        }
        else
        {
			*PinValue = DIO_PIN_LOW;
 2ae:	fa 01       	movw	r30, r20
 2b0:	10 82       	st	Z, r1
 2b2:	08 95       	ret

000002b4 <Motor_Set>:
	/* debounce */
	#define DEBOUNCE_MS 20

	/* Helper: set motor pins according to command */
	static void Motor_Set(u8 PortId, u8 PinIn1, u8 PinIn2, u8 cmd)
	{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	c8 2f       	mov	r28, r24
 2ba:	d4 2f       	mov	r29, r20
		switch(cmd)
 2bc:	21 30       	cpi	r18, 0x01	; 1
 2be:	19 f0       	breq	.+6      	; 0x2c6 <Motor_Set+0x12>
 2c0:	22 30       	cpi	r18, 0x02	; 2
 2c2:	51 f0       	breq	.+20     	; 0x2d8 <Motor_Set+0x24>
 2c4:	12 c0       	rjmp	.+36     	; 0x2ea <Motor_Set+0x36>
		{
			case M_FORWARD:
			DIO_setPinValue(PortId, PinIn1, DIO_PIN_HIGH);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_setPinValue>
			DIO_setPinValue(PortId, PinIn2, DIO_PIN_LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	6d 2f       	mov	r22, r29
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_setPinValue>
			break;
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <Motor_Set+0x46>
			case M_BACKWARD:
			DIO_setPinValue(PortId, PinIn1, DIO_PIN_LOW);
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_setPinValue>
			DIO_setPinValue(PortId, PinIn2, DIO_PIN_HIGH);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	6d 2f       	mov	r22, r29
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_setPinValue>
			break;
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <Motor_Set+0x46>
			case M_STOP:
			default:
			DIO_setPinValue(PortId, PinIn1, DIO_PIN_LOW);
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_setPinValue>
			DIO_setPinValue(PortId, PinIn2, DIO_PIN_LOW); /* coast */
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	6d 2f       	mov	r22, r29
 2f4:	8c 2f       	mov	r24, r28
 2f6:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_setPinValue>
			break;
		}
	}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <Motors_All_Forward>:
		Motor_Set(M5_PORT, M5_IN1, M5_IN2, M_STOP);
	}

	static void Motors_All_Forward(void)
	{
		Motor_Set(M1_PORT, M1_IN1, M1_IN2, M_FORWARD);
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	43 e0       	ldi	r20, 0x03	; 3
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M2_PORT, M2_IN1, M2_IN2, M_FORWARD);
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	45 e0       	ldi	r20, 0x05	; 5
 310:	64 e0       	ldi	r22, 0x04	; 4
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M3_PORT, M3_IN1, M3_IN2, M_FORWARD);
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	43 e0       	ldi	r20, 0x03	; 3
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M4_PORT, M4_IN1, M4_IN2, M_FORWARD);
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	45 e0       	ldi	r20, 0x05	; 5
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M5_PORT, M5_IN1, M5_IN2, M_FORWARD);
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	43 e0       	ldi	r20, 0x03	; 3
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
 33c:	08 95       	ret

0000033e <Motors_All_Backward>:
	}

	static void Motors_All_Backward(void)
	{
		Motor_Set(M1_PORT, M1_IN1, M1_IN2, M_BACKWARD);
 33e:	22 e0       	ldi	r18, 0x02	; 2
 340:	43 e0       	ldi	r20, 0x03	; 3
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M2_PORT, M2_IN1, M2_IN2, M_BACKWARD);
 34a:	22 e0       	ldi	r18, 0x02	; 2
 34c:	45 e0       	ldi	r20, 0x05	; 5
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M3_PORT, M3_IN1, M3_IN2, M_BACKWARD);
 356:	22 e0       	ldi	r18, 0x02	; 2
 358:	43 e0       	ldi	r20, 0x03	; 3
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M4_PORT, M4_IN1, M4_IN2, M_BACKWARD);
 362:	22 e0       	ldi	r18, 0x02	; 2
 364:	45 e0       	ldi	r20, 0x05	; 5
 366:	64 e0       	ldi	r22, 0x04	; 4
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M5_PORT, M5_IN1, M5_IN2, M_BACKWARD);
 36e:	22 e0       	ldi	r18, 0x02	; 2
 370:	43 e0       	ldi	r20, 0x03	; 3
 372:	62 e0       	ldi	r22, 0x02	; 2
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
 37a:	08 95       	ret

0000037c <Motors_Turn_Left>:
	}

	static void Motors_Turn_Left(void)
	{
		/* Example layout: M1,M2 = left; M3 = center; M4,M5 = right */
		Motor_Set(M1_PORT, M1_IN1, M1_IN2, M_BACKWARD);
 37c:	22 e0       	ldi	r18, 0x02	; 2
 37e:	43 e0       	ldi	r20, 0x03	; 3
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M2_PORT, M2_IN1, M2_IN2, M_BACKWARD);
 388:	22 e0       	ldi	r18, 0x02	; 2
 38a:	45 e0       	ldi	r20, 0x05	; 5
 38c:	64 e0       	ldi	r22, 0x04	; 4
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M3_PORT, M3_IN1, M3_IN2, M_STOP);
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	43 e0       	ldi	r20, 0x03	; 3
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M4_PORT, M4_IN1, M4_IN2, M_FORWARD);
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	45 e0       	ldi	r20, 0x05	; 5
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M5_PORT, M5_IN1, M5_IN2, M_FORWARD);
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	43 e0       	ldi	r20, 0x03	; 3
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
 3b8:	08 95       	ret

000003ba <Motors_Turn_Right>:
	}

	static void Motors_Turn_Right(void)
	{
		Motor_Set(M1_PORT, M1_IN1, M1_IN2, M_FORWARD);
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	43 e0       	ldi	r20, 0x03	; 3
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M2_PORT, M2_IN1, M2_IN2, M_FORWARD);
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	45 e0       	ldi	r20, 0x05	; 5
 3ca:	64 e0       	ldi	r22, 0x04	; 4
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M3_PORT, M3_IN1, M3_IN2, M_STOP);
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	43 e0       	ldi	r20, 0x03	; 3
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M4_PORT, M4_IN1, M4_IN2, M_BACKWARD);
 3de:	22 e0       	ldi	r18, 0x02	; 2
 3e0:	45 e0       	ldi	r20, 0x05	; 5
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M5_PORT, M5_IN1, M5_IN2, M_BACKWARD);
 3ea:	22 e0       	ldi	r18, 0x02	; 2
 3ec:	43 e0       	ldi	r20, 0x03	; 3
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
 3f6:	08 95       	ret

000003f8 <Motors_All_Stop>:
	}

	/* group motions */
	static void Motors_All_Stop(void)
	{
		Motor_Set(M1_PORT, M1_IN1, M1_IN2, M_STOP);
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	43 e0       	ldi	r20, 0x03	; 3
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M2_PORT, M2_IN1, M2_IN2, M_STOP);
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	45 e0       	ldi	r20, 0x05	; 5
 408:	64 e0       	ldi	r22, 0x04	; 4
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M3_PORT, M3_IN1, M3_IN2, M_STOP);
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	43 e0       	ldi	r20, 0x03	; 3
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M4_PORT, M4_IN1, M4_IN2, M_STOP);
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	45 e0       	ldi	r20, 0x05	; 5
 420:	64 e0       	ldi	r22, 0x04	; 4
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
		Motor_Set(M5_PORT, M5_IN1, M5_IN2, M_STOP);
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	43 e0       	ldi	r20, 0x03	; 3
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Motor_Set>
 434:	08 95       	ret

00000436 <ReadSwitchStable>:
		Motor_Set(M5_PORT, M5_IN1, M5_IN2, M_BACKWARD);
	}

	/* Read switch with debounce */
	static u8 ReadSwitchStable(u8 PortId, u8 PinId)
	{
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	00 d0       	rcall	.+0      	; 0x440 <ReadSwitchStable+0xa>
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	18 2f       	mov	r17, r24
 446:	06 2f       	mov	r16, r22
		u8 s1, s2;
		SWITCH_getState(PortId, PinId, &s1);
 448:	ae 01       	movw	r20, r28
 44a:	4f 5f       	subi	r20, 0xFF	; 255
 44c:	5f 4f       	sbci	r21, 0xFF	; 255
 44e:	0e 94 c7 02 	call	0x58e	; 0x58e <SWITCH_getState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 452:	8f e3       	ldi	r24, 0x3F	; 63
 454:	9c e9       	ldi	r25, 0x9C	; 156
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <ReadSwitchStable+0x20>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <ReadSwitchStable+0x26>
 45c:	00 00       	nop
		_delay_ms(DEBOUNCE_MS);
		SWITCH_getState(PortId, PinId, &s2);
 45e:	ae 01       	movw	r20, r28
 460:	4e 5f       	subi	r20, 0xFE	; 254
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	60 2f       	mov	r22, r16
 466:	81 2f       	mov	r24, r17
 468:	0e 94 c7 02 	call	0x58e	; 0x58e <SWITCH_getState>

		if (s1 == s2) return s1;
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	9a 81       	ldd	r25, Y+2	; 0x02
 470:	89 13       	cpse	r24, r25
		return SWITCH_NOT_PRESSED;
 472:	80 e0       	ldi	r24, 0x00	; 0
	}
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <main>:
	int main(void)
	{
		u8 forward_state, backward_state, left_state, right_state, stop_state;

		/* init switches (use your SWITCH_init) */
		SWITCH_init(SW_PORT, SW_FORWARD_PIN);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 c3 02 	call	0x586	; 0x586 <SWITCH_init>
		SWITCH_init(SW_PORT, SW_BACKWARD_PIN);
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 c3 02 	call	0x586	; 0x586 <SWITCH_init>
		SWITCH_init(SW_PORT, SW_LEFT_PIN);
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 c3 02 	call	0x586	; 0x586 <SWITCH_init>
		SWITCH_init(SW_PORT, SW_RIGHT_PIN);
 49a:	63 e0       	ldi	r22, 0x03	; 3
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 c3 02 	call	0x586	; 0x586 <SWITCH_init>
		SWITCH_init(SW_PORT, SW_STOP_PIN);
 4a2:	64 e0       	ldi	r22, 0x04	; 4
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 c3 02 	call	0x586	; 0x586 <SWITCH_init>

		/* motor pins -> outputs */
		DIO_setPinDirection(M1_PORT, M1_IN1, DIO_PIN_OUTPUT);
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	62 e0       	ldi	r22, 0x02	; 2
 4ae:	83 e0       	ldi	r24, 0x03	; 3
 4b0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
		DIO_setPinDirection(M1_PORT, M1_IN2, DIO_PIN_OUTPUT);
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	63 e0       	ldi	r22, 0x03	; 3
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>

		DIO_setPinDirection(M2_PORT, M2_IN1, DIO_PIN_OUTPUT);
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	64 e0       	ldi	r22, 0x04	; 4
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
		DIO_setPinDirection(M2_PORT, M2_IN2, DIO_PIN_OUTPUT);
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	65 e0       	ldi	r22, 0x05	; 5
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>

		DIO_setPinDirection(M3_PORT, M3_IN1, DIO_PIN_OUTPUT);
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
		DIO_setPinDirection(M3_PORT, M3_IN2, DIO_PIN_OUTPUT);
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>

		DIO_setPinDirection(M4_PORT, M4_IN1, DIO_PIN_OUTPUT);
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
		DIO_setPinDirection(M4_PORT, M4_IN2, DIO_PIN_OUTPUT);
 4f0:	41 e0       	ldi	r20, 0x01	; 1
 4f2:	65 e0       	ldi	r22, 0x05	; 5
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>

		DIO_setPinDirection(M5_PORT, M5_IN1, DIO_PIN_OUTPUT);
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
		DIO_setPinDirection(M5_PORT, M5_IN2, DIO_PIN_OUTPUT);
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>

		Motors_All_Stop();
 50e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Motors_All_Stop>

		while (1)
		{
			forward_state  = ReadSwitchStable(SW_PORT, SW_FORWARD_PIN);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 1b 02 	call	0x436	; 0x436 <ReadSwitchStable>
 51a:	c8 2f       	mov	r28, r24
			backward_state = ReadSwitchStable(SW_PORT, SW_BACKWARD_PIN);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 1b 02 	call	0x436	; 0x436 <ReadSwitchStable>
 524:	d8 2f       	mov	r29, r24
			left_state     = ReadSwitchStable(SW_PORT, SW_LEFT_PIN);
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 1b 02 	call	0x436	; 0x436 <ReadSwitchStable>
 52e:	18 2f       	mov	r17, r24
			right_state    = ReadSwitchStable(SW_PORT, SW_RIGHT_PIN);
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 1b 02 	call	0x436	; 0x436 <ReadSwitchStable>
 538:	08 2f       	mov	r16, r24
			stop_state     = ReadSwitchStable(SW_PORT, SW_STOP_PIN);
 53a:	64 e0       	ldi	r22, 0x04	; 4
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 1b 02 	call	0x436	; 0x436 <ReadSwitchStable>

			if (stop_state == SWITCH_PRESSED) {
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	19 f4       	brne	.+6      	; 0x54c <main+0xca>
				Motors_All_Stop();
 546:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Motors_All_Stop>
 54a:	16 c0       	rjmp	.+44     	; 0x578 <main+0xf6>
			}
			else if (forward_state == SWITCH_PRESSED) {
 54c:	c1 30       	cpi	r28, 0x01	; 1
 54e:	19 f4       	brne	.+6      	; 0x556 <main+0xd4>
				Motors_All_Forward();
 550:	0e 94 80 01 	call	0x300	; 0x300 <Motors_All_Forward>
 554:	11 c0       	rjmp	.+34     	; 0x578 <main+0xf6>
			}
			else if (backward_state == SWITCH_PRESSED) {
 556:	d1 30       	cpi	r29, 0x01	; 1
 558:	19 f4       	brne	.+6      	; 0x560 <main+0xde>
				Motors_All_Backward();
 55a:	0e 94 9f 01 	call	0x33e	; 0x33e <Motors_All_Backward>
 55e:	0c c0       	rjmp	.+24     	; 0x578 <main+0xf6>
			}
			else if (left_state == SWITCH_PRESSED) {
 560:	11 30       	cpi	r17, 0x01	; 1
 562:	19 f4       	brne	.+6      	; 0x56a <main+0xe8>
				Motors_Turn_Left();
 564:	0e 94 be 01 	call	0x37c	; 0x37c <Motors_Turn_Left>
 568:	07 c0       	rjmp	.+14     	; 0x578 <main+0xf6>
			}
			else if (right_state == SWITCH_PRESSED) {
 56a:	01 30       	cpi	r16, 0x01	; 1
 56c:	19 f4       	brne	.+6      	; 0x574 <main+0xf2>
				Motors_Turn_Right();
 56e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Motors_Turn_Right>
 572:	02 c0       	rjmp	.+4      	; 0x578 <main+0xf6>
			}
			else {
				Motors_All_Stop();
 574:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Motors_All_Stop>
 578:	8f e5       	ldi	r24, 0x5F	; 95
 57a:	9a ee       	ldi	r25, 0xEA	; 234
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <main+0xfa>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x100>
 582:	00 00       	nop
 584:	c6 cf       	rjmp	.-116    	; 0x512 <main+0x90>

00000586 <SWITCH_init>:
#include "SWITCH_interface.h"


void SWITCH_init(u8 PortId, u8 PinId)
{
	DIO_setPinDirection(PortId,PinId,DIO_PIN_INPUT);
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 58c:	08 95       	ret

0000058e <SWITCH_getState>:
}


void SWITCH_getState(u8 PortId, u8 PinId,u8* switchSate)
{
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	1f 92       	push	r1
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	8a 01       	movw	r16, r20
	u8 state;
	DIO_getPinValue(PortId,PinId,&state);
 59e:	ae 01       	movw	r20, r28
 5a0:	4f 5f       	subi	r20, 0xFF	; 255
 5a2:	5f 4f       	sbci	r21, 0xFF	; 255
 5a4:	0e 94 12 01 	call	0x224	; 0x224 <DIO_getPinValue>
	
	if(DIO_PIN_HIGH == state)
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	19 f4       	brne	.+6      	; 0x5b4 <SWITCH_getState+0x26>
	{
		*switchSate = SWITCH_PRESSED;
 5ae:	f8 01       	movw	r30, r16
 5b0:	80 83       	st	Z, r24
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <SWITCH_getState+0x2a>
	}
	else
	{
		*switchSate = SWITCH_NOT_PRESSED;
 5b4:	f8 01       	movw	r30, r16
 5b6:	10 82       	st	Z, r1
	}
}
 5b8:	0f 90       	pop	r0
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
